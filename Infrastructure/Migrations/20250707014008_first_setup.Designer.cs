// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ServiceContext))]
    [Migration("20250707014008_first_setup")]
    partial class first_setup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Ask", b =>
                {
                    b.Property<int>("IdAsk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsk"));

                    b.Property<string>("AskText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IdSlide")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAsk");

                    b.HasIndex("IdSlide")
                        .IsUnique();

                    b.ToTable("Asks");

                    b.HasData(
                        new
                        {
                            IdAsk = 1,
                            AskText = "¿Para que sirve SLIDE-X?",
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Que cosas son posibles con slide-x",
                            IdSlide = 2,
                            Name = "Pregunta 1"
                        },
                        new
                        {
                            IdAsk = 2,
                            AskText = "¿Cómo nos llamamos?",
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pregunta sobre nosotros",
                            IdSlide = 4,
                            Name = "Preugunta 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Option", b =>
                {
                    b.Property<int>("IdOption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOption"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAsk")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IdOption");

                    b.HasIndex("IdAsk");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            IdOption = 1,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 1,
                            IsCorrect = true,
                            OptionText = "Para hacer presentaciones en vivo"
                        },
                        new
                        {
                            IdOption = 2,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 1,
                            IsCorrect = false,
                            OptionText = "Para hacer llamadas online"
                        },
                        new
                        {
                            IdOption = 3,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 1,
                            IsCorrect = false,
                            OptionText = "Chat virtual"
                        },
                        new
                        {
                            IdOption = 4,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 1,
                            IsCorrect = false,
                            OptionText = "Para jugar en linea"
                        },
                        new
                        {
                            IdOption = 5,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 2,
                            IsCorrect = true,
                            OptionText = "Ctrl c + Ctrl v"
                        },
                        new
                        {
                            IdOption = 6,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 2,
                            IsCorrect = false,
                            OptionText = "GPTECH"
                        },
                        new
                        {
                            IdOption = 7,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 2,
                            IsCorrect = false,
                            OptionText = "ChatGptLovers"
                        },
                        new
                        {
                            IdOption = 8,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdAsk = 2,
                            IsCorrect = false,
                            OptionText = "PlotTECH"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Presentation", b =>
                {
                    b.Property<int>("IdPresentation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPresentation"));

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IdUserCreat")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPresentation");

                    b.ToTable("Presentations");

                    b.HasData(
                        new
                        {
                            IdPresentation = 1,
                            ActivityStatus = true,
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdUserCreat = new Guid("11111111-2222-3333-4444-555555555555"),
                            Title = "Presentación SLIDE‑X"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Slide", b =>
                {
                    b.Property<int>("IdSlide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSlide"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPresentation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSlide");

                    b.HasIndex("IdPresentation");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            IdSlide = 1,
                            BackgroundColor = "#FFFFFF",
                            Content = "¡Bienvenidos a SlideX!",
                            CreateAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdPresentation = 1,
                            Position = 0,
                            Title = "Portada",
                            Url = "https://i.ibb.co/VZKC6GW/1.jpg"
                        },
                        new
                        {
                            IdSlide = 2,
                            BackgroundColor = "#FDE68A",
                            Content = "",
                            CreateAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdPresentation = 1,
                            Position = 1,
                            Title = "¿Cómo funciona?1",
                            Url = "https://i.ibb.co/bg8yWmgV/2.jpg"
                        },
                        new
                        {
                            IdSlide = 3,
                            BackgroundColor = "#BFDBFE",
                            Content = "¿A quien está dirigido?",
                            CreateAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdPresentation = 1,
                            Position = 2,
                            Title = "Contenido",
                            Url = "https://i.ibb.co/35PGPbnC/3.jpg"
                        },
                        new
                        {
                            IdSlide = 4,
                            BackgroundColor = "#FCA5A5",
                            Content = "",
                            CreateAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdPresentation = 1,
                            Position = 3,
                            Title = "Sobre nosotros",
                            Url = "https://i.ibb.co/ZpKkWjR5/4.jpg"
                        },
                        new
                        {
                            IdSlide = 5,
                            BackgroundColor = "#D9F99D",
                            Content = "¡Gracias por participar!",
                            CreateAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            IdPresentation = 1,
                            Position = 4,
                            Title = "¡Fin!",
                            Url = "https://i.ibb.co/993nxTdF/5.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ask", b =>
                {
                    b.HasOne("Domain.Entities.Slide", "Slide")
                        .WithOne("Ask")
                        .HasForeignKey("Domain.Entities.Ask", "IdSlide")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slide");
                });

            modelBuilder.Entity("Domain.Entities.Option", b =>
                {
                    b.HasOne("Domain.Entities.Ask", "Ask")
                        .WithMany("Options")
                        .HasForeignKey("IdAsk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ask");
                });

            modelBuilder.Entity("Domain.Entities.Slide", b =>
                {
                    b.HasOne("Domain.Entities.Presentation", "Presentation")
                        .WithMany("Slides")
                        .HasForeignKey("IdPresentation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presentation");
                });

            modelBuilder.Entity("Domain.Entities.Ask", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.Presentation", b =>
                {
                    b.Navigation("Slides");
                });

            modelBuilder.Entity("Domain.Entities.Slide", b =>
                {
                    b.Navigation("Ask");
                });
#pragma warning restore 612, 618
        }
    }
}
